# -*- coding: utf-8 -*-
"""Código Evidencia Semana TEC .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jtpT3mROOuVjWKZkfzH-LDLcZzc52Ru3
"""

pip install passporteye

import cv2
import matplotlib.pyplot as plt
from passporteye import read_mrz
import random
import string
import unicodedata
from google.colab import files


def limpiar_texto(texto):
    """Convierte el texto a mayúscula, elimina acentos, cambia ñ→n y partículas comunes."""
    if not texto:
        return ""

    texto = texto.lower()  # Convierte el texto a minúscula para procesarlo

    # Eliminar acentos y ñ
    texto = unicodedata.normalize("NFD", texto).encode(
        "ascii", "ignore"
    ).decode("utf-8")
    texto = texto.replace("ñ", "n")

    # Eliminar partículas comunes
    particulas = [" de ", " del ", " la ", " las ", " los ", " de la "]
    for p in particulas:
        texto = texto.replace(p, " ")

    return texto.strip().upper()  # Devuelve el texto como mayúscula


def generar_rfc(paterno, materno, nombre, fecha):
    """Genera un RFC ficticio basado en los apellidos, nombre y fecha."""
    paterno, materno, nombre = map(limpiar_texto, [paterno, materno, nombre])

    p1 = paterno[0] if paterno else "Error"  # Toma la primera letra del apellido paterno
    p2 = next(
        (ch for ch in paterno[1:] if ch in "AEIOU"), "Error"
    )  # Toma la primera vocal del apellido paterno
    p3 = materno[0] if materno else "Error"  # Toma la primera letra del apellido materno
    p4 = nombre[0] if nombre else "Error"  # Toma la primera letra del nombre

    # Generación de homoclave: tres caracteres alfabéticos o numéricos
    homoclave = "".join(random.choices(string.ascii_uppercase + string.digits, k=3))
    return f"{p1}{p2}{p3}{p4}{fecha}{homoclave}"


def main():
    """Flujo principal del programa."""
    # Carga el pasaporte como imagen
    uploaded = files.upload()
    filename = list(uploaded.keys())[0]
    passport = cv2.imread(filename)

    if passport is None:
        raise FileNotFoundError(f"No se pudo abrir la imagen: {filename}")

    # Mostrar el pasaporte
    plt.imshow(cv2.cvtColor(passport, cv2.COLOR_BGR2RGB))
    plt.title("Pasaporte")
    plt.axis("off")

    # Extracción del MRZ
    mrz = read_mrz(filename)
    if not mrz:
        print("No se pudo leer la MRZ.")
        return

    datos = mrz.to_dict()
    nombre = datos.get("names", "")
    apellidos = datos.get("surname", "")
    fecha = datos.get("date_of_birth", "")

    # Separar apellidos
    partes = apellidos.split()
    apellido_paterno = partes[0] if len(partes) >= 1 else ""
    apellido_materno = partes[1] if len(partes) >= 2 else ""

    # Mostrar datos identificados
    print(f"\nNombre(s): {nombre.title() or 'No encontrado'}")
    print(
        f"Apellido paterno: "
        f"{(apellido_paterno.title() if apellido_paterno else 'No encontrado')}"
    )
    print(
        f"Apellido materno: "
        f"{(apellido_materno.title() if apellido_materno else 'No encontrado')}"
    )

    # Obtiene e imprime el RFC
    if nombre and apellido_paterno and fecha:
        rfc = generar_rfc(apellido_paterno, apellido_materno, nombre, fecha)
        print(f"\nRFC generado: {rfc}")
    else:
        print("No se pudo generar el RFC por falta de datos.")


if __name__ == "__main__":
    main()